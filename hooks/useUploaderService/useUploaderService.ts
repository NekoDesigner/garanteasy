/**
 * useUploader - Generated by Garanteasier CLI
 */

import * as ImagePicker from 'expo-image-picker';
import { useState } from 'react';
import { Alert } from "react-native";
import { Document, DocumentType } from '../../models/Document/Document';
import { ImageService } from '../../services/ImageService';
import { useDocumentRepository } from '../useDocumentRepository/useDocumentRepository';

export function useUploaderService({ user }: { user: { id: string } | null }) {
  const { saveDocument } = useDocumentRepository({ ownerId: user?.id || '' });
  const [isCreatingDocument, setIsCreatingDocument] = useState(false);
  const [uploaderDocumentType, setUploaderDocumentType] = useState<DocumentType>('other');

  /** Get photo from library */
  const pickImage = async (cb: (savedImageUri: string) => void) => {
      try {
        const result = await ImagePicker.launchImageLibraryAsync({
          mediaTypes: ['images'],
          quality: 0.8,
        });

        if (!result.canceled && result.assets[0]) {
          // Save image to filesystem and get the URI
          const savedImageUri = await ImageService.saveItemImage(result.assets[0].uri);
          cb(savedImageUri);
        }
      } catch (error) {
        console.error('Erreur lors de la sélection d\'image:', error);
        Alert.alert('Erreur', 'Une erreur est survenue lors de la sélection de l\'image.');
      }
  };

  /** Take photo with camera */
  const takePhoto = async (cb: (savedImageUri: string) => void) => {
    try {
      const cameraPermission = await ImagePicker.requestCameraPermissionsAsync();
      if (!cameraPermission.granted) {
        Alert.alert('Permission refusée', 'L\'accès à la caméra est requis pour prendre une photo.');
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ['images'],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        // Save image to filesystem and get the URI
        const savedImageUri = await ImageService.saveItemImage(result.assets[0].uri);
        cb(savedImageUri);
      }
    } catch (error) {
      console.error('Erreur lors de la prise de photo:', error);
      Alert.alert('Erreur', 'Une erreur est survenue lors de la prise de photo.');
    }
  };

  /** Create a document from an image asset */
  const createDocumentFromImage = async (asset: ImagePicker.ImagePickerAsset, cb: (document: Document) => void) => {
    try {
      setIsCreatingDocument(true);

      // Import the PDF service functions
      const { createPdfFromImages, removeFileExtension } = await import('../../services/PDFService');

      // Create PDF with appropriate title for 'other' type documents
      const pdfOptions = {
        title: asset.fileName ? removeFileExtension(asset.fileName) : 'Document Supplémentaire',
        author: 'GarantEasy Scanner',
        subject: 'Document ajouté',
        compress: true,
      };

      // Create PDF and get file path
      const pdfPath = await createPdfFromImages([asset.uri], pdfOptions);
      const fileName = pdfPath.split('/').pop() || 'document.pdf';

      // Create and save the document with type 'other'
      let newDocument = new Document({
        ownerId: user?.id || '',
        name: fileName,
        filename: fileName,
        type: uploaderDocumentType,
        mimetype: 'application/pdf',
        fileSource: 'local',
        filePath: pdfPath,
      });

      newDocument = await saveDocument(newDocument);

      // Update the current document state to show the newly created document
      cb(newDocument);
      // TODO: implement it in the callback function
      // setAdditionalDocuments((prev) => [...prev, newDocument]);

      Alert.alert('Succès', 'Document ajouté avec succès!');
    } catch (error) {
      console.error('Error creating document:', error);
      Alert.alert('Erreur', `Échec de la création du document: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    } finally {
      setIsCreatingDocument(false);
    }
  };

  /** Pick a document from the library */
  const pickDocumentFromLibrary = async (cb: (document: Document) => void) => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ['images'],
        allowsEditing: false,
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        await createDocumentFromImage(result.assets[0], cb);
      }
    } catch (error) {
      console.error('Erreur lors de la sélection d\'image:', error);
      Alert.alert('Erreur', 'Une erreur est survenue lors de la sélection de l\'image.');
    }
  };

  /** Take a document photo */
  const takeDocumentPhoto = async (cb: (document: Document) => void) => {
      try {
        const cameraPermission = await ImagePicker.requestCameraPermissionsAsync();
        if (!cameraPermission.granted) {
          Alert.alert('Permission refusée', 'L\'accès à la caméra est requis pour prendre une photo.');
          return;
        }

        const result = await ImagePicker.launchCameraAsync({
          mediaTypes: ['images'],
          allowsEditing: false,
          quality: 0.8,
        });

        if (!result.canceled && result.assets[0]) {
          await createDocumentFromImage(result.assets[0], cb);
        }
      } catch (error) {
        console.error('Erreur lors de la prise de photo:', error);
        Alert.alert('Erreur', 'Une erreur est survenue lors de la prise de photo.');
      }
    };

  /** Handle adding a document */
  const handleAddDocument = async (cb: (document: Document) => void) => {
    try {
      // Demander la permission d'accès à la galerie
      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (!permissionResult.granted) {
        Alert.alert('Permission refusée', 'L\'accès à la galerie est requis pour sélectionner un document.');
        return;
      }

      // Afficher les options pour prendre une photo ou sélectionner depuis la galerie
      Alert.alert(
        'Ajouter un document',
        'Choisissez une option',
        [
          { text: 'Annuler', style: 'cancel' },
          { text: 'Prendre une photo', onPress: () => takeDocumentPhoto(cb) },
          { text: 'Choisir depuis la galerie', onPress: () => pickDocumentFromLibrary(cb) }
        ]
      );
    } catch (error) {
      console.error('Erreur lors de l\'ajout de document:', error);
      Alert.alert('Erreur', 'Une erreur est survenue lors de l\'ajout du document.');
    }
  };

  /** Select an image from the library or take a photo */
  const handleSelectImage = async (cb: (savedImageUri: string | undefined) => void) => {
      try {
        // Demander la permission d'accès à la galerie
        const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
        if (!permissionResult.granted) {
          Alert.alert('Permission refusée', 'L\'accès à la galerie est requis pour sélectionner une image.');
          return;
        }

        // Afficher les options pour prendre une photo ou sélectionner depuis la galerie
        Alert.alert(
          'Sélectionner une image',
          'Choisissez une option',
          [
            { text: 'Annuler', style: 'cancel' },
            { text: 'Prendre une photo', onPress: () => takePhoto(cb) },
            { text: 'Choisir depuis la galerie', onPress: () => pickImage(cb) }
          ]
        );
      } catch (error) {
        console.error('Erreur lors de la sélection d\'image:', error);
        Alert.alert('Erreur', 'Une erreur est survenue lors de la sélection de l\'image.');
      }
    };

  return { handleAddDocument, handleSelectImage, isCreatingDocument, setUploaderDocumentType };
}

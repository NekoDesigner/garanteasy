/**
 * useCategoryRepository - Generated by Garanteasier CLI
 */

import { useSQLiteContext } from "expo-sqlite";
import React from "react";
import { Category } from "../../models/Category/Category";
import { DatabaseCategoryDto } from "../../models/Category/Category.dto";

export interface ICategoryRepositoryProps {
  // Define any props needed for the repository, e.g., ownerId
  ownerId?: string;
}

export function useCategoryRepository({ ownerId }: ICategoryRepositoryProps) {
  const db = useSQLiteContext();

  const getAllCategories = React.useCallback(async () => {
    // First, ensure default categories exist for this user
    // await initializeDefaultCategories();

    const query = `SELECT * FROM categories ${ownerId ? "WHERE owner_id = ?" : ""}`;
    const params = ownerId ? [ownerId] : [];
    const result = await db.getAllAsync<DatabaseCategoryDto>(query, params);
    if (result.length === 0) {
      console.warn("No categories found in the database.");
      return [];
    }

    return result.map<Category>((category) => (Category.toModel(category)));
  }, [db, ownerId]);

  const getCategoryByName = React.useCallback(async (name: string): Promise<Category | null> => {
    const query = `SELECT * FROM categories WHERE name = ? ${ownerId ? "AND owner_id = ?" : ""}`;
    const params = ownerId !== undefined ? [name, ownerId] : [name];
    const result = await db.getFirstAsync<DatabaseCategoryDto>(query, params);
    if (result) {
      return Category.toModel(result);
    }
    return null;
  }, [db, ownerId]);
  return {
    getAllCategories,
    getCategoryByName
  };
}

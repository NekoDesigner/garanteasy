/**
 * useDocumentRepository - Generated by Garanteasier CLI
 */

import { SQLiteExecuteAsyncResult, useSQLiteContext } from "expo-sqlite";
import { DatabaseSaveException } from "../../exceptions/DatabaseSaveException";
import { Document } from "../../models/Document/Document";
import { DatabaseDocumentDto } from "../../models/Document/Document.dto";

export interface IDocumentRepositoryProps {
  ownerId: string;
}

export function useDocumentRepository({ ownerId }: IDocumentRepositoryProps) {
  const db = useSQLiteContext();
  async function getAllDocuments(): Promise<Document[]> {
    const query = `SELECT * FROM documents WHERE owner_id = ?`;
    const result = await db.getAllAsync<DatabaseDocumentDto>(query, [ownerId]);
    const documents: Document[] = result.map((doc) => Document.toModel(doc));
    console.log("Fetched documents:", documents);
    return documents;
  }
  async function getDocumentById(id: string): Promise<Document | null> {
    const query = `SELECT * FROM documents WHERE id = ? AND owner_id = ?`;
    const result = await db.getFirstAsync<DatabaseDocumentDto>(query, [id, ownerId]);
    if (result) {
      return Document.toModel(result);
    }
    return null;
  }
  async function saveDocument(document: Document) {
    let result: SQLiteExecuteAsyncResult<DatabaseDocumentDto>;
    const dbDocumentDto: DatabaseDocumentDto = Document.fromModel(document);
    if (dbDocumentDto.id) {
      // UPDATE
      const statement = await db.prepareAsync(
        `UPDATE documents SET 
            name = $name, 
            filename = $filename, 
            type = $type, 
            file_path = $file_path, 
            file_source = $file_source, 
            owner_id = $owner_id,
            updated_at = CURRENT_TIMESTAMP
          WHERE id = $id AND owner_id = $owner_id`
      );
      result = await statement.executeAsync({
        $id: dbDocumentDto.id,
        $name: dbDocumentDto.name,
        $filename: dbDocumentDto.filename,
        $type: dbDocumentDto.type,
        $file_path: dbDocumentDto.file_path,
        $file_source: dbDocumentDto.file_source,
        $owner_id: ownerId
      });
      if (result.changes === 0) {
        throw new DatabaseSaveException(`Document with id ${dbDocumentDto.id} not found or not owned by user ${dbDocumentDto.owner_id}`);
      }
    } else {
      // INSERT
      const statement = await db.prepareAsync(
        `INSERT INTO documents (name, filename, type, file_path, file_source, owner_id, created_at, updated_at) 
          VALUES ($name, $filename, $type, $file_path, $file_source, $owner_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)`
      );
      result = await statement.executeAsync({
        $name: dbDocumentDto.name,
        $filename: dbDocumentDto.filename,
        $type: dbDocumentDto.type,
        $file_path: dbDocumentDto.file_path,
        $file_source: dbDocumentDto.file_source,
        $owner_id: ownerId
      });
      if (result.changes === 0) {
        throw new DatabaseSaveException(`Failed to save document for user ${dbDocumentDto.owner_id}`);
      }
    }
  }
  async function attachDocumentToItem(documentId: string, itemId: string): Promise<void> {
    const query = `INSERT INTO document_attachments (entity_id, document_id, model) VALUES (?, ?, ?)`;
    const statement = await db.prepareAsync(query);
    const result = await statement.executeAsync([itemId, documentId, 'Item']);
    if (result.changes === 0) {
      throw new DatabaseSaveException(`Failed to attach document ${documentId} to item ${itemId}`);
    }
  }
  async function getAllDocumentsForItem(itemId: string): Promise<Document[]> {
    const query = `
      SELECT d.* FROM documents d
      JOIN document_attachments da ON d.id = da.document_id
      WHERE da.entity_id = ? AND da.model = 'Item' AND d.owner_id = ?
    `;
    const result = await db.getAllAsync<DatabaseDocumentDto>(query, [itemId, ownerId]);
    return result.map((doc) => Document.toModel(doc));
  }
  return {
    saveDocument,
    getAllDocuments,
    getDocumentById,
    attachDocumentToItem,
    getAllDocumentsForItem
  };
}

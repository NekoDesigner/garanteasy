name: EAS Android Test Build (staging)

on:
  push:
    branches:
      - staging

  pull_request:
    branches:
      - staging

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Log in to Expo
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Run EAS Android Test Build
        id: eas-build
        run: |
            echo "🔧 Starting EAS build..."
            npx eas build --platform android --profile test --non-interactive > build-log.txt 2>&1 || {
              echo "❌ EAS build failed. Showing build-log.txt:"
              cat build-log.txt
              exit 1
            }
            BUILD_URL=$(grep -o 'https://expo.dev/accounts[^ ]*' build-log.txt | tail -1)
            echo "✅ EAS build triggered: $BUILD_URL"
            echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT

      - name: Send notification to Discord
        if: ${{ env.DISCORD_WEBHOOK_STAGING_URL != '' }}
        env:
          DISCORD_WEBHOOK_STAGING_URL: ${{ secrets.DISCORD_WEBHOOK_STAGING_URL }}
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"🚀 Nouveau build Android (staging) disponible : ${{ steps.eas-build.outputs.build_url }}\"}" \
          $DISCORD_WEBHOOK_STAGING_URL

      - name: Comment PR with build link and QR Code
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildUrl = "${{ steps.eas-build.outputs.build_url }}";
            const qrCodeUrl = "${{ steps.generate-qr-code.outputs.QR_CODE_URL }}";
            const pr = context.payload.pull_request;
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Un nouveau build Android (profil \`test\`) est disponible pour cette PR :\n🔗 ${buildUrl}\n\n📲 QR Code pour les testeurs :\n![QR Code](${qrCodeUrl})`
            });

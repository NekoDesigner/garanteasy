/**
 * ProductCard - Generated by Garanteasier CLI
 */

import { render, waitFor } from "@testing-library/react-native";
import React from "react";
import { DateService } from "../../../../services/DateService";
import ProductCard from "../index";

describe("ProductCard Components", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    test('renders correctly', () => {
      const tree = render(<ProductCard
        brand="Bosh"
        name="Tondeuse à gazon"
        purchaseDate={DateService.subtractDays(new Date(), 3)}
        warrantyDuration="15d"
        image={require('../../../../assets/images/default-product.png')}
      />).toJSON();
      expect(tree).toMatchSnapshot();
    });

  beforeEach(() => {
    jest.useFakeTimers().setSystemTime(new Date()); // Mock the current date
  });

  afterEach(() => {
    jest.useRealTimers(); // Restore real timers
  });

  describe('warranty duration progress indicator', () => {
    it('should have full progress indicator bar', async () => {
        const { getByTestId } = render(
          <ProductCard
            brand="Bosh"
            name="Tondeuse à gazon"
            purchaseDate={new Date()}
            warrantyDuration="15d"
            image={require('../../../../assets/images/default-product.png')}
          />
        );

        const progressBar = getByTestId('progressindicator');
        expect(progressBar).toBeTruthy();

        await waitFor(() => {
          const progressBarStyle = progressBar.props.style[0]; // Access the first style object
          expect(progressBarStyle.width).toBe("100%"); // Adjust the expected width based on your implementation
        });
    });

    it('should have full progress indicator bar', async () => {
        const { getByTestId } = render(
          <ProductCard
            brand="Bosh"
            name="Tondeuse à gazon"
            purchaseDate={DateService.subtractDays(new Date(), 3)}
            warrantyDuration="15d"
            image={require('../../../../assets/images/default-product.png')}
          />
        );

        const progressBar = getByTestId('progressindicator');
        expect(progressBar).toBeTruthy();

        await waitFor(() => {
          const progressBarStyle = progressBar.props.style[0]; // Access the first style object
          expect(progressBarStyle.width).not.toBe("100%"); // Adjust the expected width based on your implementation
        });
    });

    it('should have full progress indicator bar', async () => {
        const { getByTestId } = render(
          <ProductCard
            brand="Bosh"
            name="Tondeuse à gazon"
            purchaseDate={DateService.subtractDays(new Date(), 10)}
            warrantyDuration="20d"
            image={require('../../../../assets/images/default-product.png')}
          />
        );

        const progressBar = getByTestId('progressindicator');
        expect(progressBar).toBeTruthy();

        await waitFor(() => {
          const progressBarStyle = progressBar.props.style[0]; // Access the first style object
          expect(progressBarStyle.width).toBe("50%"); // Adjust the expected width based on your implementation
        });
    });
  });

  describe('warranty duration tag', () => {
    it('should display the correct warranty duration tag', async () => {
      const { getByTestId } = render(
        <ProductCard
          brand="Bosh"
          name="Tondeuse à gazon"
          purchaseDate={DateService.subtractDays(new Date(), 3)} // 3 days ago
          warrantyDuration="15d"
          image={require('../../../../assets/images/default-product.png')}
        />
      );

      await waitFor(() => {
        const tag = getByTestId('test-tag-2-text');
        expect(tag).toBeTruthy();
        expect(tag.children).toContain('Expire dans 12j'); // 15 days - 3 days passed
      });
    });

    it('should display "Aucune garantie" when no warranty duration is provided', () => {
      const { getByText } = render(
        <ProductCard
          brand="Bosh"
          name="Tondeuse à gazon"
          purchaseDate={DateService.subtractDays(new Date(), 3)}
          warrantyDuration=""
          image={require('../../../../assets/images/default-product.png')}
        />
      );

      expect(getByText('Aucune garantie')).toBeTruthy();
    });
  });
});
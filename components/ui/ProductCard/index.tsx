/**
 * ProductCard - Generated by Garanteasier CLI
 */

import React from "react";
import { View, Text, Image } from "react-native";
import { DateService } from "../../../services/DateService";
import ProgressIndicator from "../ProgressIndicator";
import RoundedIconButton from "../RoundedIconButton";
import Tag from "../Tag";
import { IProductCardProps } from "./@types";
import ProductCardStyles from "./styles";

const ProductCard: React.FC<IProductCardProps> = ({ style, testID = 'productcard', purchaseDate, ...props }) => {

  const [warrantyDurationTag, setWarrantyDurationTag] = React.useState<string>('');
  const [progress, setProgress] = React.useState<number>(1);

  function getWarrantyDurationInDay(warrantyDurationStr: string): number {
    let result = 0;
    warrantyDurationStr = warrantyDurationStr.toLowerCase();
    const warrantyDurationInYear = warrantyDurationStr.split('y')[0].trim();
    const hasYear = warrantyDurationStr.includes('y');
    if (warrantyDurationInYear && hasYear) {
      const warrantyDurationInDays = parseInt(warrantyDurationInYear) * 365;
      result += warrantyDurationInDays;
    }
    const warrantyDurationInMonth = warrantyDurationStr.split('m')[0].trim();
    const hasMonth = warrantyDurationStr.includes('m');
    if (warrantyDurationInMonth && hasMonth) {
      const warrantyDurationInDays = parseInt(warrantyDurationInMonth) * 30;
      result += warrantyDurationInDays;
    }
    const warrantyDurationInDays = warrantyDurationStr.split('d')[0].trim();
    const hasDays = warrantyDurationStr.includes('d');
    if (warrantyDurationInDays && hasDays) {
      result += parseInt(warrantyDurationInDays);
    }
    return result;
  }

  function formatExpirationDate(purchaseDateProp: Date | string, warrantyDurationInDays: number): string {
    const _purchaseDate = new Date(purchaseDateProp);
    const expirationDate = DateService.addDays(_purchaseDate, warrantyDurationInDays);
    const currentDate = new Date(); // Use the current date for calculations

    if (DateService.IsDateAfter(currentDate, expirationDate)) {
      return `Expiré le ${DateService.formatMMYY(expirationDate)}`;
    }

    // Calculate days left from the current date to the expiration date
    const daysLeft = DateService.getDaysBetweenDates(currentDate, expirationDate);

    if (daysLeft > 365) {
      const yearsLeft = Math.floor(daysLeft / 365);
      return `Expire dans ${yearsLeft}an${yearsLeft > 1 ? 's' : ''}`;
    }
    if (daysLeft > 99) {
      const monthsLeft = Math.floor(daysLeft / 30);
      return `Expire dans ${monthsLeft}m`;
    }
    return `Expire dans ${daysLeft}j`;
  }

  React.useEffect(() => {
    if (props.warrantyDuration) {
      const warrantyDurationInDays = getWarrantyDurationInDay(props.warrantyDuration);
      const expirationDate = formatExpirationDate(purchaseDate, warrantyDurationInDays);
      setWarrantyDurationTag(expirationDate);

      // Calculate rest days from purchase date to expiration date
      const _purchaseDate = new Date(purchaseDate);
      const expirationDateObj = DateService.addDays(_purchaseDate, warrantyDurationInDays);
      const currentDate = new Date();
      if (DateService.IsDateAfter(currentDate, expirationDateObj)) {
        setProgress(0);
      }
      else if (DateService.IsDateAfter(currentDate, _purchaseDate)) {
        const totalDays = DateService.getDaysBetweenDates(_purchaseDate, expirationDateObj);
        const daysPassed = DateService.getDaysBetweenDates(_purchaseDate, currentDate);

        setProgress(1 - (daysPassed / totalDays));
      }
      else {
        setProgress(1);
      }

    } else {
      setWarrantyDurationTag('Aucune garantie');
    }
  }, [props.warrantyDuration, purchaseDate]);

  return (
      <View style={[ProductCardStyles.container, style]} testID={testID} {...props}>
        <Image
          source={props.image || require('../../../assets/images/default-product.png')}
          style={ProductCardStyles.image}
          resizeMode="cover"
        />
        <View style={{ display: 'flex', flex: 1 }}>
          <View style={ProductCardStyles.brandContainer}>
            <Text style={ProductCardStyles.name} numberOfLines={1}>
              {props.name || 'Product Name'}
            </Text>
            <RoundedIconButton icon="arrow-right" onPress={() => {}} size="small" />
          </View>
          <Text style={ProductCardStyles.brand} numberOfLines={1}>
            {props.brand || 'Brand Name'}
          </Text>
          <View style={ProductCardStyles.tags}>
            <Tag testID="test-tag-1" label={`Acheté le: ${DateService.formatMMYY(purchaseDate)}`} textStyle={ProductCardStyles.tagsText} />
            <Tag testID="test-tag-2" label={warrantyDurationTag} textStyle={ProductCardStyles.tagsText} />
        </View>
        <ProgressIndicator value={progress} />
        </View>
      </View>
  );
};

export default ProductCard;

/**
 * RoundedIconButton - Generated by Garanteasier CLI
 */

import { render, fireEvent } from "@testing-library/react-native";
import React from "react";
import { IRoundedIconButtonProps } from "../@types";
import RoundedIconButton from "../index";

describe("RoundedIconButton Components", () => {

  const ICON_BUTTON_LIST: IRoundedIconButtonProps[] = [
    {
      icon: "scan",
      onPress: jest.fn(),
      testID: "roundediconbutton-scan"
    },
    {
      icon: "settings",
      onPress: jest.fn(),
      testID: "roundediconbutton-settings"
    },
    {
      icon: "arrow-left",
      onPress: jest.fn(),
      testID: "roundediconbutton-arrow-left"
    },
    {
      icon: "arrow-right",
      onPress: jest.fn(),
      testID: "roundediconbutton-arrow-right"
    }
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

    test('renders correctly', () => {
      const tree = render(<RoundedIconButton icon="arrow-left" onPress={() => {}} />).toJSON();
      expect(tree).toMatchSnapshot();
    });

  test.each(ICON_BUTTON_LIST)("renders %s icon button correctly", (props) => {
    const { getByTestId } = render(<RoundedIconButton {...props} />);
    const iconButton = getByTestId(props.testID!);
    expect(iconButton).toBeTruthy();
    expect(iconButton.props.style).toMatchSnapshot();
  });

  for (const props of ICON_BUTTON_LIST) {
    it(`calls onPress when ${props.icon} icon button is pressed`, () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(<RoundedIconButton {...props} onPress={mockOnPress} />);
      const iconButton = getByTestId(props.testID!);
      fireEvent.press(iconButton);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });
  }
});